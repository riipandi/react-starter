{"version":3,"sources":["img/logo.svg","page/App.js","page/Example.js","page/Notfound.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","src","logo","alt","NavLink","actvieClassName","to","Component","Example","Notfound","Boolean","window","location","hostname","match","routing","BrowserRouter","Switch","Route","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0RCyBzBC,0LAjBX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mEACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,uBAAd,oBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,4BAAb,wBACuBH,EAAAC,EAAAC,cAAA,+BADvB,wBAGAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,4BAAb,cACaH,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAASJ,UAAU,wCAAwCK,gBAAgB,SAASC,GAAG,YAAvF,gBADb,cAVQC,cCeHC,mLAhBX,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mEACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,uBAAd,gBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,4BAAb,wBACuBH,EAAAC,EAAAC,cAAA,mCADvB,wBAGAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,4BAAb,WACUH,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAASJ,UAAU,wCAAwCK,gBAAgB,SAASC,GAAG,KAAvF,cADV,cATYC,aCCPE,EAFE,kBAAMZ,EAAAC,EAAAC,cAAA,wBCUHW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCHN,IAAMC,EACJlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACEnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,KACEpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWzB,IACjCC,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOE,KAAK,WAAWC,UAAWb,IAClCX,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOG,UAAWZ,MAKxBa,IAASC,OAAOR,EAASS,SAASC,eAAe,SDwG3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4453f0a7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport {NavLink} from \"react-router-dom\";\n\nimport logo from '../img/logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"flex items-center justify-center h-screen w-full bg-blue-darker\">\n        <div className=\"text-center\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"text-white text-3xl\">Welcome to React</h1>\n          <p className=\"text-base text-grey mt-4\">\n            To get started, edit <code>src/page/App.js</code> and save to reload.\n          </p>\n          <p className=\"text-base text-grey mt-4\">\n            This is an <NavLink className=\"text-blue hover:text-red no-underline\" actvieClassName=\"active\" to=\"/example\">example page</NavLink>.\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport {NavLink} from \"react-router-dom\";\n\nclass Example extends Component {\n  render() {\n    return (\n      <div className=\"flex items-center justify-center h-screen w-full bg-blue-darker\">\n        <div className=\"text-center\">\n          <h1 className=\"text-white text-3xl\">Another Page</h1>\n          <p className=\"text-base text-grey mt-4\">\n            To get started, edit <code>src/page/Example.js</code> and save to reload.\n          </p>\n          <p className=\"text-base text-grey mt-4\">\n            Back to <NavLink className=\"text-blue hover:text-red no-underline\" actvieClassName=\"active\" to=\"/\">index page</NavLink>.\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Example;\n","import React from \"react\";\n\nconst Notfound = () => <h1>Not found</h1>;\n\nexport default Notfound\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport {\n  Route,\n  BrowserRouter as Router,\n  Switch\n} from \"react-router-dom\";\n\nimport App from \"./page/App\";\nimport Example from \"./page/Example\";\nimport Notfound from \"./page/Notfound\";\n\nimport * as serviceWorker from './serviceWorker';\n\nconst routing = (\n  <Router>\n    <Switch>\n      <Route exact path=\"/\" component={App} />\n      <Route path=\"/example\" component={Example} />\n      <Route component={Notfound} />\n    </Switch>\n  </Router>\n);\n\nReactDOM.render(routing, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}